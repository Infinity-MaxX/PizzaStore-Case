Jeg er her for at præsentere min version af Pizza Store casen.

Først, så har vi domæne modellen, et diagram der repræsenterer virkeligheden og modellerer vores opfattelse af, hvordan vores problem ser ud og hvad den skal indeholde.

Her har jeg lavede tre konceptuelle klasser - Pizza, Ordre og Kunde - hver med deres egne egenskaber, eller attributer som vi også kalde dem for. Her i den konceptuelle pizza klasse kan vi se to egenskaber, eller attributer, navn og pris. For den konceptuelle ordre klasse har vi attributerne ordre nummer, kunde information, pizza information, levering og total prisen. Den sidste konceptuelle klasse, kunde, indeholder attributerne navnet på kunden, kundens e-mail samt kundens telefon nummer.

Pizza og Kunde har associationer til Ordre, og Ordre har associationer til Pizza og Kunde. Hver association har en 1:1 multiplicetet til hinanden.

Det er domæne modellen.

Den næste ting på dagsordenen er Design Klasse Diagrammet, et diagram som modellerer software dellen for vores case.

Her kan vi se vores tre klasser med hver deres attributer. Fordi den modellere vore software er alt ting inde i klasse diagrammet skrevet på engelsk. 

Pizza har to attributer, _name og _price, som repræsenterer instanser for klassen, samt én operation ToString() som er en metode der konverterer information til en string.

Order har tre attributer, _orderNo, _pizza og _customer, vores instanser for klassen med _pizza og _customer referende til klasserne Pizza og Customer, samt to operationer TotalPrice() og ToString() som vores metoder. TotalPrice() beregner prisen for pizzaen og levering inklusiv moms.

Customer har tre attributter, _name, _email, og _phone, vores instanser for Customer, og én operation som er ToString() metoden.

Sidst har vi relations typen mellem Order og Kunde, og relationships typen mellem Order og Customer. Begge er compositions, hvilket betyder, at Order klassen er afhængig af Pizza klassen og Customer klassen.

Næste punkt er koden i sig selv. 

Her kan vi se fire programmer - den første værende Program, som kreerer objekter af hver klasse og printer informationen ud, og de tre andre værende klasserne i sig selv: Pizza, Order, og Customer.

Pizza klassen af to instance fields: _name og _price, som er henholdsvis af string og double typer. Så har den en constructor med det krav af navn på pizzaen samt prisen på pizzaen skal erklæres af brugeren. Videre har vi properties for navn og pris, som henholdsvis henter og returnerer navn og pris. Sidst har vi vores metode, ToString() som returner information vedrørende pizzaen - her værende dens navn og pris - som en string.

Så har Customer klassen, som består af tre instanser: _name, _email og _phone, alle string typer. Ligesom Pizza klassen, så har Customer også en constructor som kræver navn, email og telefon oplysninger af brugeren. Ligesom Pizza klasse, har Customer også properties som alle kun henter og returnerer navn, email og telefon. Og ligesom Pizza klassen, så har Customer klassen også en ToString() metode som printer all information vedrørende kunden.

Sidst har vi Order klassen, og her bliver det lidt mere spændende. Order har en global static variable counter, som tæller den totale mænge ordrer. Den har også tre instance fields, _customer, _pizza, og _oderNo, den sidste som er bare af int typen. _customer og _pizza referer henholdsvis til klasserne Customer og Pizza, og dette illustrerer det composition forhold jeg viste for klasse diagrammet.

Order klassen har også properties der henter og returner informationer om pizzaen, kunden og ordrer nummeret. Sidst har vi to metode, ToString() metoden som vi kender fra de andre to klasser og som gør det samme, og nu har vi også en TotalPrice() metoden, som kalkulerer den totale pris ved at lægger leveringen sammen til pizza prisen inklusiv moms.

Helt til sidst har jeg et sekvensdiagram der viser levetiden for hele programmet, samt leve tiden for klasserne som programmet kalder. 